@* @page "/loanpage"
@using CreditCare.Domain
@using CreditCare.Services
@inject LoanService LoanService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@code {
    [Parameter] public Customer Customer { get; set; } // Getting the customer parameter passed from the parent component

    private List<Loan> loans = new List<Loan>();
    private Loan newLoan = new Loan();
    private List<InterestRate> interestRates = new List<InterestRate>();
    private List<LoanStatus> loanStatuses = new List<LoanStatus>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch loans for the specific customer using the CustomerId from the passed Customer object
        if (Customer != null)
        {
            loans = await LoanService.GetLoansByCustomerIdAsync(Customer.CustomerId); // Use the CustomerId from the passed Customer object
        }
        interestRates = await InterestRateService.GetAllInterestRatesAsync();
        loanStatuses = await LoanStatusService.GetAllLoanStatusesAsync();
    }

    private async Task OpenAddLoanDialog()
    {
        var parameters = new DialogParameters
            {
                ["Loan"] = new Loan { Status = loanStatuses.FirstOrDefault(s => s.Name == "Active") },
                ["InterestRates"] = interestRates,
                ["LoanStatuses"] = loanStatuses
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<LoanForm>("Add New Loan", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is Loan addedLoan)
        {
            addedLoan.CustomerId = Customer.CustomerId; // Assign the correct customer ID from the passed Customer object
            await LoanService.AddLoanAsync(addedLoan);
            loans = await LoanService.GetLoansByCustomerIdAsync(Customer.CustomerId); // Refresh the loan list
        }
    }

    private async Task OpenEditLoanDialog(Loan loan)
    {
        var parameters = new DialogParameters
            {
                ["Loan"] = loan,
                ["InterestRates"] = interestRates,
                ["LoanStatuses"] = loanStatuses
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<LoanForm>("Edit Loan", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is Loan updatedLoan)
        {
            updatedLoan.CustomerId = Customer.CustomerId; // Ensure the correct customer ID
            await LoanService.UpdateLoanAsync(updatedLoan);
            loans = await LoanService.GetLoansByCustomerIdAsync(Customer.CustomerId); // Refresh the loan list
        }
    }

    private async Task DeleteLoan(int loanId)
    {
        var confirm = await DialogService.ShowMessageBox("Confirm Delete", "Are you sure you want to delete this loan?", yesText: "Yes", cancelText: "No");

        if (confirm == true)
        {
            await LoanService.UpdateLoanStatusAsync(loanId, "Deleted"); // Mark as deleted or remove
            loans = await LoanService.GetLoansByCustomerIdAsync(Customer.CustomerId); // Refresh the loan list
        }
    }
}
 *@