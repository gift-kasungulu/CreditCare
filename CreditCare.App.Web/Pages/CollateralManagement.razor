@page "/collateralmanagement"
@using CreditCare.App.Web.Pages.Components
@using CreditCare.Domain
@inject CollateralService CollateralService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

    <MudText Typo="Typo.h6" Class="mb-4">Collateral Management</MudText>
<hr />
    <MudTable Items="collaterals" Hover="true" Class="mb-4">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Collaterals</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddCollateral">
                Add Collateral
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Description</MudTh>
            <MudTh>Value</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Loan</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Description</MudTd>
            <MudTd>@context.Value.ToString("C")</MudTd>
            <MudTd>@context.collateralStatus?.Name</MudTd>
            <MudTd>@context.Loan.LoanNumber</MudTd>
            <MudTd>                    <MudIconButton Icon="@Icons.Material.Rounded.Edit"
                                   Color="Color.Primary"
                                   OnClick="() => EditCollateral(context)"
                                   Title="Edit Collateral" />

                    <MudIconButton Icon="@Icons.Material.Rounded.Delete"
                                   Color="Color.Error"
                                   OnClick="() => DeleteCollateral(context)"
                                   Title="Delete Collateral" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
@code {
    private IEnumerable<Collateral> collaterals = new List<Collateral>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshCollateralsList();
    }

    private async Task AddCollateral()
    {
        var parameters = new DialogParameters
        {
            { "ExistingCollateral", new Collateral() }
        };

        var dialog = DialogService.Show<AddEditCollateralModal>("Add Collateral", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await RefreshCollateralsList();
            Snackbar.Add("Collateral added successfully", Severity.Success);
        }
    }

    private async Task EditCollateral(Collateral collateral)
    {
        var parameters = new DialogParameters
        {
            { "ExistingCollateral", collateral }
        };

        var dialog = DialogService.Show<EditCollateralDialog>("Edit Collateral", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await RefreshCollateralsList();
            Snackbar.Add("Collateral updated successfully", Severity.Success);
        }
    }

    private async Task DeleteCollateral(Collateral collateral)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete collateral '{collateral.Description}'?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (confirm == true)
        {
            try
            {
                await CollateralService.DeleteCollateralAsync(collateral.CollateralId);
                await RefreshCollateralsList();
                Snackbar.Add("Collateral deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete collateral: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RefreshCollateralsList()
    {
        try
        {
            collaterals = await CollateralService.GetAllCollateralsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load collaterals: {ex.Message}", Severity.Error);
        }
    }
}