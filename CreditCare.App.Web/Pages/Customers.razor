@page "/customers"

<PageTitle>Customers</PageTitle>

@using CreditCare.App.Web.Pages.Components
@using CreditCare.Domain
@using CreditCare.Services
@inject CustomerService CustomerService
@inject IDialogService DialogService

<div class="fade-in">
    <MudText Typo="Typo.h5">Client Management</MudText>
    <hr />

    <MudGrid Justify="Justify.SpaceBetween" Gutter="GutterSize.Small" Class="d-flex justify-content-between align-items-center" Animated="true">
        <MudItem xs="12" sm="6" md="3">
            <MudButton OnClick="OpenAddCustomerModal" Variant="Variant.Filled" Color="Color.Primary" Animated="true">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" /> Add New Customer
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="6" md="3" Class="d-flex justify-content-end">
            <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="searchQuery" Placeholder="Search customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnKeyUp="FilterCustomers" Class="search-field" Animated="true" />
        </MudItem>
    </MudGrid>

    <MudTable Items="filteredCustomers" FixedHeader="true" Hover="true" Elevation="1" Breakpoint="Breakpoint.Sm" Animated="true">
        <HeaderContent>
            <MudTh>Full Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>NRC Number</MudTh>
            <MudTh>Phone Number</MudTh>
            <MudTh>Address</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Full Name">@context.FullName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="NRC Number">@context.NrcNumber</MudTd>
            <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Text" Color="Color.Tertiary" Size="Size.Small" OnClick="() => OpenCustomerDetailsDialog(context)" Animated="true">
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="me-1" /> Details
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenEditCustomerModal(context)" Animated="true">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="() => DeleteCustomer(context)" Animated="true">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private List<Customer> customers = new List<Customer>();
    private List<Customer> filteredCustomers = new List<Customer>();
    private string searchQuery = string.Empty;
    private IDialogReference dialog;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetAllCustomersAsync();
        filteredCustomers = customers;
    }

    private async Task OpenAddCustomerModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        dialog = DialogService.Show<CustomerForm>("Add New Customer", new DialogParameters(), options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            customers = await CustomerService.GetAllCustomersAsync();
            FilterCustomers();
        }
    }

    private async Task OpenEditCustomerModal(Customer customer)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["Customer"] = customer };
        dialog = DialogService.Show<CustomerEditForm>("Edit Customer", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            customers = await CustomerService.GetAllCustomersAsync();
            FilterCustomers();
        }
    }

    private async Task OpenCustomerDetailsDialog(Customer customer)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["Customer"] = customer };
        dialog = DialogService.Show<CustomerDetailsDialog>("Customer Details", parameters, options);
    }

    private async Task DeleteCustomer(Customer customer)
    {
        await CustomerService.DeleteCustomerAsync(customer.CustomerId);
        customers = await CustomerService.GetAllCustomersAsync();
        FilterCustomers();
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers.Where(c => c.FullName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                     c.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                     c.NrcNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                     c.PhoneNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                     c.Address.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
